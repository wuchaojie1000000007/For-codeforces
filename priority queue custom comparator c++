struct cmp {
    bool operator()(pair<int, int> p1, pair<int, int> p2) {
        double more1 = (p1.first+1)/(double )(p1.second+1) - p1.first/(double )p1.second;
        double more2 = (p2.first+1)/(double )(p2.second+1) - p2.first/(double )p2.second;
        return more1 < more2;
    }
};

class Solution {
public:
    double maxAverageRatio(vector<vector<int>> &classes, int extraStudents) {
        double ans = 0.0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;
        for (vector<int> i:classes) {
            pq.push(make_pair(i[0], i[1]));
        }
        for (int i= 0; i < extraStudents; ++i) {
            pair<int, int> cur = pq.top();pq.pop();
            cur.first++;
            cur.second++;
            pq.push(cur);
        }
        while (!pq.empty()){
            pair<int, int> cur = pq.top();pq.pop();
            ans += cur.first / (double ) cur.second;
        }
        return ans / (double ) classes.size();
    }
};
